#!/usr/bin/python 
import pygame
from pygame.locals import *

X_SIZE = 1920
Y_SIZE = 1200
pygame.init()

#Ouverture de la screen Pygame
screen = pygame.display.set_mode((X_SIZE, Y_SIZE), RESIZABLE)

#Chargement et collage du fond
fond = pygame.image.load("background.png").convert()
#fond = pygame.transform.scale(fond, (X_SIZE, Y_SIZE), screen)
#red = [244, 164, 96]
#screen.fill(red)

#screen.blit(fond, (0,0))


#Chargement et collage du personnage
#perso = pygame.image.load("perso.png").convert_alpha()
#position_perso = perso.get_rect()
#screen.blit(perso, position_perso)

# on utilise en parametre de la methode append l'objet que l'on don souhaite ajouter a la fin
# de la liste   
# pour concatener on utilise append
# i = 0 ; while i < len (maliste)jj

class NewNode:
	"""This is the node structure. It contain the name, number, orthogonal position
	and a list of tubes to other nodes"""

	def __init__(self, name, x, y, tubes = []):
		self.name = name
		self.x = x
		self.y = y
		self.tubes = tubes
		self.next = None
		return
	def __str__(self):
		return  self.name +  " " + str(self.x) + " " + str (self.y)

#Rafraichissement cd l'ecran
pygame.display.flip()

array = []
max_x = 0
max_y = 0
# this loads the map generated by lthe lem-in executable
def load_map():
	with open("../output.map", 'r') as lem_in_map:
		for line in lem_in_map:
			tab = line.split()
			name = tab[0]
			x = int(tab[1])
			if x > max_x:
				max_x = x
			y = int(tab[2])
			if y > max_y:
				max_y = y
			matrix_array = []
			for n in tab[3:]:
				matrix_array.append(int(n))
			array.append(NewNode(name, x, y, matrix_array))

if max_x == 0:
	max_x = 1
if max_y == 0:
	max_y = 1

# this puts the map to scale
for n in array:
	n.x *= X_SIZE / max_x
	if n.x <= 50:
		n.x += 50
	elif n.x >= X_SIZE - 50:
		n.x -= 50
	n.y *= Y_SIZE / max_y
	if n.y >= Y_SIZE - 50:
		n.y -= 50
	elif n.y <= 50:
		n.y += 50

# this puts the map on the screen
array_len = len(array)
for a in array:
	if a == array[0]:
		pygame.draw.circle(screen, [0,245,0], (a.x, a.y), 20, 0)
	elif a == array[-1]:
		pygame.draw.circle(screen, [245, 0, 0], (a.x, a.y), 20, 0)
	else:
		pygame.draw.circle(screen, [245,245,220], (a.x - a.x % array_len, a.y - a.y % array_len), 20, 0)
	for n in a.tubes:
		if n:
			pygame.draw.line(screen, [245, 245, 245], (a.x, a.y), (array[n].x, array[n].y), 5)

# this creates a new link between two maps
def create_link(down, up):
	draw_line = 0
	for n in array:
		if abs(n.x - down[0]) <= 20 and abs(n.y - down[1]) <= 20:
			draw_line += 1
			first = n
		if abs(n.x - up[0]) <= 20 and abs(n.y - up[1]) <= 20:
			draw_line += 1
			second = n
		if draw_line == 2:
			pygame.draw.line(screen, [245,245,220], (first.x, first.y), (second.x, second.y), 5)
			first.tubes[array.index(second)] = 1
			second.tubes[array.index(first)] = 1

# this function adds a new node upon user click and updates the adjacence matrix connection
def add_new_node(max_x, x, y):
	create = 1
	for n in array:
		if abs(n.x - x) <= 20 and abs(n.y - y) <= 20:
			create = 0
	if create == 0:
		return
	for n in array:
		n.tubes.append(int(0))
	array.append(NewNode(str(max_x), x, y, [0 for i in range(len(array) + 1)]))
	pygame.draw.circle(screen, [245,245,220], (x, y), 20, 0)
	tmp = array[-2]
	array[-2] = array[-1]
	array[-1] = tmp

def print_map():
	i = 0;
	file = open('../new_lem-in', 'w+')
	for n in array:
		if n == array[0]:
			file.write("##start\n")
		if n == array[-1]:
			file.write("##end\n")
		file.write(n.name +  " " + str(n.x) + " " + str(n.y) + '\n')
	i = 0
	for n in array:
		i += 1
		for j in range (0, i):
			if n.tubes[j]:
				file.write(n.name + "-" + array[j].name + '\n')


pygame.key.set_repeat(400, 30)

test = 1
while (test):
	largeText = pygame.font.Font('freesansbold.ttf',115)
	TextSurf, TextRect = text_objects("A bit Racey", largeText)
	TextRect.center = ((display_width/2),(display_height/2))
	gameDisplay.blit(TextSurf, TextRect)
	pygame.draw.rect(gameDisplay, green,(150,450,100,50))
	pygame.draw.rect(gameDisplay, red,(550,450,100,50))

loop_display = 1
while loop_display:

	#    modulo_scale_x = array_len / X_SIZE
	# modulo_scale_y = array_len / Y_SIZE

	for event in pygame.event.get():    #Attente des events
		if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
			print_map()
			loop_display = 0


		if event.type == MOUSEBUTTONDOWN:
			max_x += 1
			add_new_node(max_x, event.pos[0], event.pos[1])
			down = event.pos
		if event.type == MOUSEBUTTONUP:
			up = event.pos
			create_link(down, up)
	#Re-collage
	screen.blit(screen, (0,0))   
#    screen.blit(perso, position_perso)
	#refresh
	pygame.display.flip()
